name: Deploy to staging

on:
  push:
    branches: [ git-actions-test ]

jobs:
  create-deployment-artifacts:
    name: Create deployment artifacts
    runs-on: ubuntu-latest
    outputs:
      deployment-matrix: ${{ steps.export-deployment-matrix.outputs.deployment-matrix }}
    steps:
      - uses: actions/checkout@v2

      - name: Compile CSS and Javascript
        run: |
          npm install
          npm run prod

      - name: Configure PHP 8.1
        uses: shivammathur/setup-php@master
        with:
          php-version: 8.1
          extensions: mbstring, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer, xml, intl

      - name: Create storage directories
        run: |
          mkdir -p storage/{app,framework,logs}
          mkdir -p storage/framework/{cache,session,views}
          chmod -R 777 storage

      - name: Composer install
        run: composer install --no-dev --no-interaction --prefer-dist

      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules *

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v2
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

#      - name: Export deployment matrix
#        id: export-deployment-matrix
#        run: |
#          JSON="$(cat ./deployment-config.json)"
#          JSON="${JSON//'%'/'%25'}"
#          JSON="${JSON//$'\n'/'%0A'}"
#          JSON="${JSON//$'\r'/'%0D'}"
#          echo "::set-output name=deployment-matrix::$JSON"


  prepare-release-on-servers:
    name: "Staging server: Prepare release"
    runs-on: ubuntu-latest
    needs: create-deployment-artifacts
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: app-build
      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          source: ${{ github.sha }}.tar.gz
          target: ${{ SECRETS.STAGING_PATH }}/artifacts
