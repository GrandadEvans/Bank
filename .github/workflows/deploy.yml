name: Deploy to staging

on:
  push:
    branches: [ git-actions-test ]

env:
  SSH_HOST: ${{ secrets.STAGING_HOST }}
  SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
  SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
  SSH_KEY: ${{ secrets.SSH_KEY }}
  SSH_PORT: ${{ secrets.SSH_PORT }}
  GITHUB_SHA: ${{ github.sha }}
  HOME_PATH: ${{ secrets.STAGING_BASE_PATH }}
  RELEASES_PATH: ${{ secrets.STAGING_BASE_PATH }}/releases
  STORAGE_PATH: ${{ secrets.STAGING_BASE_PATH }}/storage
  ARTIFACTS_PATH: ${{ secrets.STAGING_BASE_PATH }}/artifacts
  LATEST_RELEASE_PATH: ${{ secrets.STAGING_BASE_PATH }}/releases/${{ github.sha }}
  PUBLIC_HTML_PATH: ${{ secrets.STAGING_BASE_PATH }}/public_html
  ACTIVE_PATH: ${{ secrets.STAGING_BASE_PATH }}/public_html/current
  LARAVEL_PUBLIC_PATH: ${{ secrets.STAGING_BASE_PATH }}/public_html/current/public
  ENV: ${{ secrets.STAGING_ENV }}
  FRAMEWORK: laravel
  ENV_FILE: .env.test
  PHP_PATH: /usr/local/bin/php81

jobs:
  setup:
    name: Set up artifacts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Activate release
        run: printf "%s" "${{ env.ENV }}" > .env

      - name: Compile CSS and Javascript
        run: |
          npm install
          npm run dev

      - name: Add storage dir
        run: |
          [ -e storage ] && rm -rf storage
          mkdir -p storage/app
          mkdir -p storage/logs
          mkdir -p storage/public
          mkdir -p storage/logs
          mkdir -p storage/framework
          mkdir -p storage/framework/cache
          mkdir -p storage/framework/sessions
          mkdir -p storage/framework/testing
          mkdir -p storage/framework/views
          chmod -R 0777 storage

      - name: Composer install
        run: composer install --no-interaction

  laravel:
    name: Laravel (PHP ${{ matrix.php-versions }} on ${{ matrix.operating-system }})
    needs: setup
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-latest]
        php-versions: ['8.1']
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Docs: https://github.com/shivammathur/setup-php
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, dom, fileinfo
          coverage: xdebug

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-progress --optimize-autoloader # --prefer-dist
#
#      - name: Prepare the application
#        run: |
#          php -r "file_exists('.env') || copy('.env.example', '.env');"
#          php artisan key:generate

      - name: Copy testing environment
        run: printf "%s" "${{ env.TESTING_ENV }}" > .env.test

      - name: Clear Config
        run: php artisan config:clear

      - name: Test with phpunit
        run: vendor/bin/codecept

  upload:
    name: Export deployment artifact
    runs-on: ubuntu-latest
    needs: laravel
    steps:
      - outputs:
          deployment-matrix: ${{ steps.export-deployment-matrix.outputs.deployment-matrix }}

      - name: Create deployment artifact
        run: tar --create --gzip --file="${{ env.GITHUB_SHA }}.tar.gz" --exclude-vcs --exclude-vcs-ignores * .htaccess*

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v2
        with:
          name: app-build
          path: "${{ env.GITHUB_SHA }}.tar.gz"

  prepare-release-on-servers:
    name: "Staging server: Prepare release"
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: app-build

      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: "${{ env.SSH_HOST }}"
          username:  "${{ env.SSH_USERNAME }}"
          passphrase: "${{ env.SSH_PASSPHRASE }}"
          key: "${{ env.SSH_KEY }}"
          port: "${{ env.SSH_PORT }}"
          source: "${{ env.GITHUB_SHA }}.tar.gz"
          target: "${{ env.ARTIFACTS_PATH }}"

      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        with:
          host: "${{ env.SSH_HOST }}"
          username: "${{ env.SSH_USERNAME }}"
          passphrase: "${{ env.SSH_PASSPHRASE }}"
          key: "${{ env.SSH_KEY }}"
          port: "${{ env.SSH_PORT }}"
          script: |
            [ ! -d "${{ env.ARTIFACTS_PATH }}" ]                  && mkdir -p "${{ env.ARTIFACTS_PATH }}"
            [ ! -d "${{ env.PUBLIC_HTML_PATH }}" ]                && mkdir -p "${{ env.PUBLIC_HTML_PATH }}"
            [ ! -d "${{ env.RELEASES_PATH }}" ]                   && mkdir -p "${{ env.RELEASES_PATH }}"
            [ ! -d "${{ env.STORAGE_PATH }}" ]                    && mkdir -p "${{ env.STORAGE_PATH }}"
            [ ! -d "${{ env.STORAGE_PATH }}/app" ]                && mkdir -p "${{ env.STORAGE_PATH }}/app"
            [ ! -d "${{ env.STORAGE_PATH }}/logs" ]               && mkdir -p "${{ env.STORAGE_PATH }}/logs"
            [ ! -d "${{ env.STORAGE_PATH }}/public" ]             && mkdir -p "${{ env.STORAGE_PATH }}/public"
            [ ! -d "${{ env.STORAGE_PATH }}/framework" ]          && mkdir -p "${{ env.STORAGE_PATH }}/framework"
            [ ! -d "${{ env.STORAGE_PATH }}/framework/cache" ]    && mkdir -p "${{ env.STORAGE_PATH }}/framework/cache"
            [ ! -d "${{ env.STORAGE_PATH }}/framework/sessions" ] && mkdir -p "${{ env.STORAGE_PATH }}/framework/sessions"
            [ ! -d "${{ env.STORAGE_PATH }}/frameworks/testing" ] && mkdir -p "${{ env.STORAGE_PATH }}/framework/testing"
            [ ! -d "${{ env.STORAGE_PATH }}/framework/views" ]    && mkdir -p "${{ env.STORAGE_PATH }}/framework/views"
            chmod -R 0777 "${{ env.STORAGE_PATH }}"
            mkdir -p "${{ env.LATEST_RELEASE_PATH }}"
            tar --extract --ungzip --file="${{ env.ARTIFACTS_PATH }}/${{ env.GITHUB_SHA }}.tar.gz" -C "${{ env.LATEST_RELEASE_PATH }}"

  activate-release:
    name: "Staging server: Activate release"
    runs-on: ubuntu-latest
    needs: prepare-release-on-servers
    steps:
      - name: Activate release
        uses: appleboy/ssh-action@master
        with:
          host: "${{ env.STAGING_HOST }}"
          username: "${{ env.SSH_USERNAME }}"
          passphrase: "${{ env.SSH_PASSPHRASE }}"
          key: "${{ env.SSH_KEY }}"
          port: "${{ env.SSH_PORT }}"
          script: |
            printf "%s" "${{ env.ENV }}" > "${{ env.HOME_PATH }}/.env.staging"
            ln --symbolic --force "${{ env.HOME_PATH }}/.env.staging" "${{ env.LATEST_RELEASE_PATH }}/.env"
            cd "${{ env.PUBLIC_HTML_PATH }}"
            ln --symbolic --force -T "${{ env.LATEST_RELEASE_PATH }}" ./current
            ln --symbolic "${{ env.STORAGE_PATH }}" "${{ env.ACTIVE_PATH }}"
            ln --symbolic --force --no-target-directory "${{ env.ACTIVE_PATH }}/.htaccess-siteground-public_html" .htaccess
            cd "${{ env.LARAVEL_PUBLIC_PATH }}"
            ln --symbolic --force --no-target-directory "${{ env.ACTIVE_PATH }}/.htaccess-siteground-public" .htaccess

  run-after-hooks:
    name: "Staging server: After hook"
    runs-on: ubuntu-latest
    needs: activate-release
    steps:
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        with:
          host: "${{ env.STAGING_HOST }}"
          username: "${{ env.SSH_USERNAME }}"
          passphrase: "${{ env.SSH_PASSPHRASE }}"
          key: "${{ env.SSH_KEY }}"
          port: "${{ env.SSH_PORT }}"
          script: |
            cd "${{ env.ACTIVE_PATH }}"
            php81 artisan migrate --no-interaction --force

  clean-up:
    name: "Staging server: Clean up"
    runs-on: ubuntu-latest
    needs: run-after-hooks
    steps:
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USERNAME }}
          passphrase: ${{ env.SSH_PASSPHRASE }}
          key: ${{ env.SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          script: |
            cd "${{ env.RELEASES_PATH }}" && ls -t -2 | tail -n +2 | xargs rm -rf
            cd "${{ env.ARTIFACTS_PATH }}" && ls -t -2 | tail -n +2 | xargs rm -rf
